diff --git a/kernel/proc.c b/kernel/proc.c
index ebbf5a2..15e7f6f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -242,15 +242,24 @@ growproc(int n)
   struct proc *p = myproc();
 
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
-      return -1;
-    }
-  } else if(n < 0){
+  // if(n > 0){
+  //   if((sz = uvmalloc(p->pagetable, sz, sz + n)) == 0) {
+  //     return -1;
+  //   }
+  // } else if(n < 0){
+  //   sz = uvmdealloc(p->pagetable, sz, sz + n);
+  // }
+
+ if (n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    // The reduction operation cannot be delayed, so we leave the original `uvmdealloc` function.
+    p->sz = sz;
+    return 0;
+  } else {
+    sz += n;
+    p->sz = sz;
+    return 0;
   }
-  p->sz = sz;
-  return 0;
 }
 
 // Create a new process, copying the parent.
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..50e4713 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,12 +67,42 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } else if (r_scause() == 13 || r_scause() == 15) {
+    // `stval` contains the virtual address that caused the page fault
+    uint64 va = r_stval();
+    char *mem;
+
+    if (va >= p->sz || va < p->trapframe->sp) {
+      // Kill a process if it page-faults on a virtual memory address
+      // higher than any allocated with sbrk().
+      p->killed = 1;
+      goto end;
+    }
+
+    mem = kalloc();
+    if (mem == 0) {
+      // Handle out-of-memory correctly:
+      // if kalloc() fails in the page fault handler, kill the current process.
+      p->killed = 1;
+      goto end;
+    }
+    memset(mem, 0, PGSIZE);
+
+    va = PGROUNDDOWN(va);  // get the page corresponding to the virtual address
+    if(mappages(p->pagetable, va, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_U) != 0){
+      // Note that we don't use `PTE_V`
+      kfree(mem);
+      p->killed = 1;
+      goto end;
+    }
+  }
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
   }
 
+end:
   if(p->killed)
     exit(-1);
 
diff --git a/kernel/vm.c b/kernel/vm.c
old mode 100644
new mode 100755
index bccb405..27bd71c
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -111,6 +113,45 @@ walkaddr(pagetable_t pagetable, uint64 va)
   return pa;
 }
 
+uint64
+user_walkaddr(pagetable_t pagetable, uint64 va) {
+  pte_t *pte;
+  uint64 pa;
+
+  if(va >= MAXVA)
+    return 0;
+
+  pte = walk(pagetable, va, 0);
+  if(pte == 0 || (*pte & PTE_V) == 0) {
+    struct proc *p = myproc();
+    if (va >= p->sz || va < p->trapframe->sp) {
+      return 0;
+    }
+    char *mem = kalloc();
+    if (mem == 0) {
+      // Handle out-of-memory correctly:
+      // if kalloc() fails in the page fault handler, kill the current process.
+      p->killed = 1;
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+
+    va = PGROUNDDOWN(va);  // get the page corresponding to the virtual address
+    if(mappages(pagetable, va, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_U) != 0){
+      kfree(mem);
+      p->killed = 1;
+      return 0;
+    }
+    
+    return (uint64)mem; // physical address
+  }
+
+  if((*pte & PTE_U) == 0)
+    return 0;
+  pa = PTE2PA(*pte);
+  return pa;
+}
+
 // add a mapping to the kernel page table.
 // only used when booting.
 // does not flush TLB or enable paging.
@@ -180,10 +221,15 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     panic("uvmunmap: not aligned");
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
-    if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+    if((pte = walk(pagetable, a, 0)) == 0) {
+      continue;
+      //panic("uvmunmap: walk");
+    }
+    if((*pte & PTE_V) == 0) {
+      continue;
+      // panic("uvmunmap: not mapped");
+    }
+
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -314,10 +360,14 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+    if((pte = walk(old, i, 0)) == 0) {
+      continue;
+      // panic("uvmcopy: pte should exist");
+    }
+    if((*pte & PTE_V) == 0) {
+      continue; // lazy allocation
+      // panic("uvmcopy: page not present");
+    }
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
@@ -358,7 +408,7 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    pa0 = walkaddr(pagetable, va0);
+    pa0 = user_walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
@@ -383,7 +433,7 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
+    pa0 = user_walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
@@ -410,7 +460,7 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
 
   while(got_null == 0 && max > 0){
     va0 = PGROUNDDOWN(srcva);
-    pa0 = walkaddr(pagetable, va0);
+    pa0 = user_walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (srcva - va0);
